@commit 8251a1b15cefd4da2de136a9edadb3afa8683be1
$ tlc -workers 8 MultiShardTxnTLA | tee logout
TLC2 Version 2.18 of Day Month 20?? (rev: f2d0ab8)
Warning: Please run the Java VM, which executes TLC with a throughput optimized garbage collector, by passing the "-XX:+UseParallelGC" property.
(Use the -nowarning option to disable this warning.)
Running breadth-first search Model-Checking with fp 114 and seed 8461999844088242404 with 8 workers on 10 cores with 4096MB heap and 64MB offheap memory [pid: 77743] (Mac OS X 14.5 aarch64, Oracle Corporation 22.0.1 x86_64, MSBDiskFPSet, DiskStateQueue).
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/MultiShardTxnTLA.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/Integers.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Integers.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/Sequences.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Sequences.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/FiniteSets.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/FiniteSets.tla)
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/Util.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/TLC.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/TLC.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/Naturals.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Naturals.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/Functions.tla (jar:file:/usr/local/bin/CommunityModules-deps.jar!/Functions.tla)
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/ClientCentric.tla
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/MDB.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-15312684948756448916/Folds.tla (jar:file:/usr/local/bin/CommunityModules-deps.jar!/Folds.tla)
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module Folds
Semantic processing of module Functions
Semantic processing of module Util
Semantic processing of module TLC
Semantic processing of module ClientCentric
Semantic processing of module MDB
Semantic processing of module MultiShardTxnTLA
Starting... (2024-07-03 11:22:34)
Computing initial states...
Computed 2 initial states...
Finished computing initial states: 4 states generated, with 2 of them distinct at 2024-07-03 11:22:39.
Progress(11) at 2024-07-03 11:22:42: 546,288 states generated (546,288 s/min), 62,019 distinct states found (62,019 ds/min), 29,072 states left on queue.
Error: Invariant SnapshotIsolation is violated.
Error: The behavior up to this point is:
State 1: <Initial predicate>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<>> @@ t2 :> <<>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = (s1 :> (t1 :> <<>> @@ t2 :> <<>>) @@ s2 :> (t1 :> <<>> @@ t2 :> <<>>))
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 2: <RouterTxnOp(s1,t1,k1,"read") line 123, col 5 to line 132, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 1 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            <<[k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE]>> @@
        t2 :> <<>> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 3: <RouterTxnOp(s1,t2,k1,"read") line 123, col 5 to line 132, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 1 @@ t2 :> 1)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            <<[k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE]>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 4: <RouterTxnOp(s1,t1,k1,"write") line 123, col 5 to line 132, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 1)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 5: <RouterTxnAbort(t1) line 152, col 5 to line 154, col 214 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 1)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 6: <ShardTxnStart(s1,t1) line 164, col 5 to line 180, col 179 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 1)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 7: <RouterTxnOp(s1,t2,k1,"write") line 123, col 5 to line 132, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 8: <ShardTxnRead(s1,t1,k1) line 185, col 5 to line 194, col 215 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 1 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<[op |-> "read", value |-> NoValue, key |-> k1]>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 9: <ShardTxnWrite(s1,t1,k1) line 199, col 5 to line 211, col 191 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {k1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> t1 @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t1, key |-> k1] >> @@
  t2 :> <<>> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 10: <ShardTxnAbort(s1,t1) line 285, col 5 to line 289, col 205 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {k1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> t1 @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t1, key |-> k1] >> @@
  t2 :> <<>> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> TRUE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 11: <ShardTxnStart(s1,t2) line 164, col 5 to line 180, col 179 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {k1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> t1 @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t1, key |-> k1] >> @@
  t2 :> <<>> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> TRUE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 12: <ShardTxnRead(s1,t2,k1) line 185, col 5 to line 194, col 215 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 1) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {k1} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> t1 @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t1, key |-> k1] >> @@
  t2 :> <<[op |-> "read", value |-> NoValue, key |-> k1]>> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> TRUE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 13: <ShardTxnWrite(s1,t2,k1) line 199, col 5 to line 211, col 191 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 2) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {k1} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> t1 @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t1, key |-> k1] >> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> @@
        t2 :>
            << [k |-> k1, op |-> "read", shard |-> s1, coordinator |-> TRUE],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> TRUE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

1760432 states generated, 180560 distinct states found, 68363 states left on queue.
The depth of the complete state graph search is 13.
Finished in 13s at (2024-07-03 11:22:47)
