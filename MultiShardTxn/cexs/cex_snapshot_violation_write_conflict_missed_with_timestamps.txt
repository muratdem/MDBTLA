TLC2 Version 2.18 of Day Month 20?? (rev: f2d0ab8)
Warning: Please run the Java VM, which executes TLC with a throughput optimized garbage collector, by passing the "-XX:+UseParallelGC" property.
(Use the -nowarning option to disable this warning.)
Running Random Simulation with seed 8664102525915680066 with 8 workers on 10 cores with 4096MB heap and 64MB offheap memory [pid: 33888] (Mac OS X 14.5 aarch64, Oracle Corporation 22.0.1 x86_64).
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/MultiShardTxnTLA.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/Integers.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Integers.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/Sequences.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Sequences.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/FiniteSets.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/FiniteSets.tla)
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/Util.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/TLC.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/TLC.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/Naturals.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Naturals.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/Functions.tla (jar:file:/usr/local/bin/CommunityModules-deps.jar!/Functions.tla)
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/ClientCentric.tla
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/MDB.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-18377244640603887988/Folds.tla (jar:file:/usr/local/bin/CommunityModules-deps.jar!/Folds.tla)
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module Folds
Semantic processing of module Functions
Semantic processing of module Util
Semantic processing of module TLC
Semantic processing of module ClientCentric
Semantic processing of module MDB
Semantic processing of module MultiShardTxnTLA
Starting... (2024-07-09 14:05:23)
Computed 4 initial states...
Error: Invariant SnapshotIsolation is violated.
Error: The behavior up to this point is:
State 1: <Init line 95, col 5 to line 115, col 44 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 0 @@ t2 :> 0)
/\ rTxnReadTs = (t1 :> NoValue @@ t2 :> NoValue)
/\ participants = (t1 :> <<>> @@ t2 :> <<>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = (s1 :> (t1 :> <<>> @@ t2 :> <<>>) @@ s2 :> (t1 :> <<>> @@ t2 :> <<>>))
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 2: <RouterTxnOp(s1,t1,k1,"read") line 128, col 5 to line 141, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 1 @@ t2 :> 0)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> NoValue)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ] >> @@
        t2 :> <<>> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 3: <RouterTxnOp(s1,t1,k1,"read") line 128, col 5 to line 141, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 0)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> NoValue)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :> <<>> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 4: <RouterTxnOp(s1,t2,k1,"read") line 128, col 5 to line 141, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 1)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 5: <RouterTxnOp(s1,t2,k1,"write") line 128, col 5 to line 141, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 2)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 6: <RouterTxnCoordinateCommit(s1,t2,k2,"coordCommit") line 146, col 5 to line 156, col 212 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 7: <RouterTxnAbort(t1) line 160, col 5 to line 162, col 226 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 8: <ShardTxnStart(s1,t2) line 172, col 5 to line 190, col 191 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 2 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [self |-> TRUE, participants |-> <<s1>>] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 9: <RouterTxnOp(s1,t1,k1,"write") line 128, col 5 to line 141, col 198 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 10: <ShardTxnPrepare(s1,t2) line 272, col 5 to line 281, col 225 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 11: <RouterTxnAbort(t2) line 160, col 5 to line 162, col 226 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 12: <ShardTxnCoordinatorRecvCommitVote(s1,t2,s1) line 253, col 5 to line 257, col 219 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {s1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 13: <ShardTxnRead(s1,t2,k1) line 195, col 5 to line 204, col 227 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 1) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {s1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<[op |-> "read", value |-> NoValue, key |-> k1]>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 14: <ShardTxnCoordinatorDecideCommit(s1,t2) line 262, col 5 to line 267, col 225 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 1) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {s1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = (t1 :> <<>> @@ t2 :> <<[op |-> "read", value |-> NoValue, key |-> k1]>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 15: <ShardTxnWrite(s1,t2,k1) line 209, col 5 to line 221, col 203 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 2) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {s1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :> <<>> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 16: <ShardTxnCoordinateCommit(s1,t2) line 240, col 5 to line 249, col 203 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 3) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :> <<>> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [self |-> TRUE, participants |-> <<s1>>] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 17: <ShardTxnCommit(s1,t2) line 285, col 5 to line 291, col 208 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 3) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :> <<>> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ log = (s1 :> <<[key |-> k1, value |-> t2]>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 18: <ShardTxnStart(s1,t1) line 172, col 5 to line 190, col 191 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 3) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :> <<>> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ log = (s1 :> <<[value |-> t2, key |-> k1]>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [self |-> TRUE, participants |-> <<s1>>] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 19: <ShardTxnRead(s1,t1,k1) line 195, col 5 to line 204, col 227 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 1 @@ t2 :> 3) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :> <<[op |-> "read", value |-> NoValue, key |-> k1]>> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ log = (s1 :> <<[value |-> t2, key |-> k1]>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 20: <ShardTxnRead(s1,t1,k1) line 195, col 5 to line 204, col 227 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 3) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "read", value |-> NoValue, key |-> k1] >> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ log = (s1 :> <<[value |-> t2, key |-> k1]>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

State 21: <ShardTxnWrite(s1,t1,k1) line 209, col 5 to line 221, col 203 of module MultiShardTxnTLA>
/\ lsn = (s1 :> (t1 :> 3 @@ t2 :> 3) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (t1 :> 3 @@ t2 :> 3)
/\ rTxnReadTs = (t1 :> 0 @@ t2 :> 0)
/\ participants = (t1 :> <<s1>> @@ t2 :> <<s1>>)
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ msgsPrepare = {[shard |-> s1, coordinator |-> s1, tid |-> t2]}
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t2, to |-> s1]}
/\ msgsAbort = {[shard |-> s1, tid |-> t1], [shard |-> s1, tid |-> t2]}
/\ updated = (s1 :> (t1 :> {k1} @@ t2 :> {k1}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ snapshotStore = ( s1 :>
      ( t1 :> (k1 :> t1 @@ k2 :> NoValue) @@
        t2 :> (k1 :> t2 @@ k2 :> NoValue) ) @@
  s2 :>
      ( t1 :> (k1 :> NoValue @@ k2 :> NoValue) @@
        t2 :> (k1 :> NoValue @@ k2 :> NoValue) ) )
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t2]}
/\ catalog = (k1 :> s1 @@ k2 :> s1)
/\ ops = ( t1 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t1, key |-> k1] >> @@
  t2 :>
      << [op |-> "read", value |-> NoValue, key |-> k1],
         [op |-> "write", value |-> t2, key |-> k1] >> )
/\ overlap = (s1 :> (t1 :> {t1} @@ t2 :> {t2}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 shard |-> s1,
                 coordinator |-> TRUE,
                 readTs |-> 0 ],
               [ k |-> k1,
                 op |-> "write",
                 shard |-> s1,
                 coordinator |-> FALSE,
                 readTs |-> 0 ],
               [ k |-> k2,
                 participants |-> <<s1>>,
                 op |-> "coordCommit",
                 shard |-> s1 ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ log = (s1 :> <<[value |-> t2, key |-> k1]>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE] @@
        t2 :> [participants |-> <<s1>>, self |-> TRUE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE] ) )

The number of states generated: 7296926
Simulation using seed 8664102525915680066 and aril 0
Progress: 7297109 states checked, 161578 traces generated (trace length: mean=18, var(x)=289, sd=17)
Finished in 28s at (2024-07-09 14:05:51)
