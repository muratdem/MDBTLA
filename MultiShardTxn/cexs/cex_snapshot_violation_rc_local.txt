TLC2 Version 2.18 of Day Month 20?? (rev: f2d0ab8)
Warning: Please run the Java VM, which executes TLC with a throughput optimized garbage collector, by passing the "-XX:+UseParallelGC" property.
(Use the -nowarning option to disable this warning.)
Running breadth-first search Model-Checking with fp 14 and seed -6394281406301487728 with 9 workers on 10 cores with 4096MB heap and 64MB offheap memory [pid: 75652] (Mac OS X 14.5 aarch64, Oracle Corporation 22.0.1 x86_64, MSBDiskFPSet, DiskStateQueue).
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/MultiShardTxn.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/Integers.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Integers.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/Sequences.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Sequences.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/FiniteSets.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/FiniteSets.tla)
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/Util.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/TLC.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/TLC.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/Naturals.tla (jar:file:/usr/local/bin/tla2tools.jar!/tla2sany/StandardModules/Naturals.tla)
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/Functions.tla (jar:file:/usr/local/bin/CommunityModules-deps.jar!/Functions.tla)
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/ClientCentric.tla
Parsing file /Users/william.schultz/Documents/Internship/code/MDBTLA/MultiShardTxn/MDB.tla
Parsing file /private/var/folders/cw/42j0zrt52h59knygndym9q800000gp/T/tlc-3820597710934474926/Folds.tla (jar:file:/usr/local/bin/CommunityModules-deps.jar!/Folds.tla)
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module Folds
Semantic processing of module Functions
Semantic processing of module Util
Semantic processing of module TLC
Semantic processing of module ClientCentric
Semantic processing of module MDB
Semantic processing of module MultiShardTxn
Starting... (2024-07-25 09:41:22)
Warning: The set Router has been defined to be a symmetry set but contains less than two elements.
Computing initial states...
Computed 2 initial states...
Finished computing initial states: 4 states generated, with 2 of them distinct at 2024-07-25 09:41:27.
Progress(13) at 2024-07-25 09:41:30: 424,308 states generated (424,308 s/min), 100,784 distinct states found (100,784 ds/min), 47,555 states left on queue.
Progress(20) at 2024-07-25 09:42:30: 10,144,362 states generated (9,720,054 s/min), 1,435,661 distinct states found (1,334,877 ds/min), 296,160 states left on queue.
Error: Invariant SnapshotIsolation is violated.
Error: The behavior up to this point is:
State 1: <Initial predicate>
/\ txnSnapshots = ( s1 :> (t1 :> NoValue @@ t2 :> NoValue) @@
  s2 :> (t1 :> NoValue @@ t2 :> NoValue) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ rTxnReadTs = (r1 :> (t1 :> NoValue @@ t2 :> NoValue))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<>> @@ t2 :> <<>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = (s1 :> (t1 :> <<>> @@ t2 :> <<>>) @@ s2 :> (t1 :> <<>> @@ t2 :> <<>>))
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 2: <RouterTxnOp(r1,s1,t1,k1,"write") line 247, col 5 to line 267, col 227 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :> (t1 :> NoValue @@ t2 :> NoValue) @@
  s2 :> (t1 :> NoValue @@ t2 :> NoValue) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 1 @@ t2 :> 0))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> NoValue))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1>> @@ t2 :> <<>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :> <<>> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 3: <RouterTxnOp(r1,s2,t1,k2,"write") line 247, col 5 to line 267, col 227 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :> (t1 :> NoValue @@ t2 :> NoValue) @@
  s2 :> (t1 :> NoValue @@ t2 :> NoValue) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 0))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> NoValue))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :> <<>> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :> <<>> ) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 4: <RouterTxnOp(r1,s1,t2,k1,"read") line 247, col 5 to line 267, col 227 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :> (t1 :> NoValue @@ t2 :> NoValue) @@
  s2 :> (t1 :> NoValue @@ t2 :> NoValue) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 1))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :> <<>> ) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 5: <RouterTxnOp(r1,s2,t2,k2,"read") line 247, col 5 to line 267, col 227 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :> (t1 :> NoValue @@ t2 :> NoValue) @@
  s2 :> (t1 :> NoValue @@ t2 :> NoValue) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k2,
                 op |-> "read",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) )
/\ shardTxns = (s1 :> {} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 6: <ShardTxnStart(s1,t1) line 344, col 5 to line 354, col 231 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :> (t1 :> NoValue @@ t2 :> NoValue) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k2,
                 op |-> "read",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 7: <ShardTxnStart(s2,t1) line 344, col 5 to line 354, col 231 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k2,
                 op |-> "read",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) )

State 8: <ShardTxnStart(s2,t2) line 344, col 5 to line 354, col 231 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 0 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ k |-> k1,
                 op |-> "write",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k2,
                 op |-> "read",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 9: <ShardTxnWrite(s1,t1,k1) line 377, col 5 to line 388, col 237 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 1 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 2 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<[op |-> "write", key |-> k1, value |-> t1]>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k2,
                 op |-> "read",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 10: <RouterTxnCoordinateCommit(r1,s1,t1,"coordCommit") line 272, col 5 to line 284, col 244 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 1 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 0))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = (t1 :> <<[op |-> "write", key |-> k1, value |-> t1]>> @@ t2 :> <<>>)
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ op |-> "coordCommit",
                 shard |-> s1,
                 participants |-> <<s1, s2>> ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :>
            << [ k |-> k2,
                 op |-> "read",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 11: <ShardTxnRead(s2,t2,k2) line 359, col 5 to line 372, col 251 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 1 @@ t2 :> 0) @@ s2 :> (t1 :> 0 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :> <<[op |-> "write", key |-> k1, value |-> t1]>> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ op |-> "coordCommit",
                 shard |-> s1,
                 participants |-> <<s1, s2>> ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :>
      ( t1 :>
            << [ k |-> k2,
                 op |-> "write",
                 coord |-> FALSE,
                 start |-> TRUE,
                 shard |-> s2,
                 readTs |-> 0,
                 rc |-> "local" ] >> @@
        t2 :> <<>> ) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 12: <ShardTxnWrite(s2,t1,k2) line 377, col 5 to line 388, col 237 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 1 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = {}
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :>
            << [ op |-> "coordCommit",
                 shard |-> s1,
                 participants |-> <<s1, s2>> ] >> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :> [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 13: <ShardTxnCoordinateCommit(s1,t1) line 419, col 5 to line 432, col 214 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 14: <ShardTxnPrepare(s1,t1) line 457, col 5 to line 470, col 197 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> FALSE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {t1} @@ s2 :> {})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 15: <ShardTxnPrepare(s2,t1) line 457, col 5 to line 470, col 197 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {t1} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 16: <ShardTxnCoordinatorRecvCommitVote(s1,t1,s2) line 436, col 5 to line 442, col 249 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {t1} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {s2} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 17: <ShardTxnCoordinatorRecvCommitVote(s1,t1,s1) line 436, col 5 to line 442, col 249 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {t1} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {s1, s2} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 18: <ShardTxnCoordinatorDecideCommit(s1,t1) line 447, col 5 to line 452, col 255 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 2 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {t1} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {s1, s2} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s1, tid |-> t1], [shard |-> s2, tid |-> t1]}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t1} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 0 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 19: <ShardTxnCommit(s1,t1) line 474, col 5 to line 486, col 197 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :> NoValue ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 3 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {s1, s2} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s2, tid |-> t1]}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<(k1 :> t1)>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :> [participants |-> <<>>, self |-> FALSE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 20: <ShardTxnStart(s1,t2) line 344, col 5 to line 354, col 231 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 3 @@ t2 :> 0) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {s1, s2} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s2, tid |-> t1]}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :> <<[op |-> "read", key |-> k2, value |-> NoValue]>> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = ( s1 :>
      ( t1 :> <<>> @@
        t2 :>
            << [ k |-> k1,
                 op |-> "read",
                 coord |-> TRUE,
                 start |-> TRUE,
                 shard |-> s1,
                 readTs |-> 0,
                 rc |-> "local" ] >> ) @@
  s2 :> (t1 :> <<>> @@ t2 :> <<>>) )
/\ shardTxns = (s1 :> {t2} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<(k1 :> t1)>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :>
            [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

State 21: <ShardTxnRead(s1,t2,k1) line 359, col 5 to line 372, col 251 of module MultiShardTxn>
/\ txnSnapshots = ( s1 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> t1 @@ k2 :> NoValue),
              prepared |-> FALSE ] ) @@
  s2 :>
      ( t1 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> t1),
              prepared |-> TRUE ] @@
        t2 :>
            [ ts |-> 0,
              data |-> (k1 :> NoValue @@ k2 :> NoValue),
              prepared |-> FALSE ] ) )
/\ lsn = (s1 :> (t1 :> 3 @@ t2 :> 1) @@ s2 :> (t1 :> 1 @@ t2 :> 1))
/\ rtxn = (r1 :> (t1 :> 3 @@ t2 :> 2))
/\ rTxnReadTs = (r1 :> (t1 :> 0 @@ t2 :> 0))
/\ epoch = (s1 :> 1 @@ s2 :> 1)
/\ shardPreparedTxns = (s1 :> {} @@ s2 :> {t1})
/\ msgsPrepare = { [shard |-> s1, tid |-> t1, coordinator |-> s1],
  [shard |-> s2, tid |-> t1, coordinator |-> s1] }
/\ msgsVoteCommit = {[shard |-> s1, tid |-> t1, to |-> s1], [shard |-> s2, tid |-> t1, to |-> s1]}
/\ msgsAbort = {}
/\ updated = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ coordCommitVotes = (s1 :> (t1 :> {s1, s2} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ msgsCommit = {[shard |-> s2, tid |-> t1]}
/\ rParticipants = (r1 :> (t1 :> <<s1, s2>> @@ t2 :> <<s1, s2>>))
/\ catalog = (k1 :> s1 @@ k2 :> s2)
/\ ops = ( t1 :>
      << [op |-> "write", key |-> k1, value |-> t1],
         [op |-> "write", key |-> k2, value |-> t1] >> @@
  t2 :>
      << [op |-> "read", key |-> k2, value |-> NoValue],
         [op |-> "read", key |-> k1, value |-> t1] >> )
/\ overlap = (s1 :> (t1 :> {} @@ t2 :> {}) @@ s2 :> (t1 :> {} @@ t2 :> {}))
/\ rlog = (s1 :> (t1 :> <<>> @@ t2 :> <<>>) @@ s2 :> (t1 :> <<>> @@ t2 :> <<>>))
/\ shardTxns = (s1 :> {t2} @@ s2 :> {t1, t2})
/\ commitIndex = (s1 :> 1 @@ s2 :> 0)
/\ rInCommit = (r1 :> (t1 :> TRUE @@ t2 :> FALSE))
/\ log = (s1 :> <<(k1 :> t1)>> @@ s2 :> <<>>)
/\ aborted = (s1 :> (t1 :> FALSE @@ t2 :> FALSE) @@ s2 :> (t1 :> FALSE @@ t2 :> FALSE))
/\ coordInfo = ( s1 :>
      ( t1 :>
            [participants |-> <<s1, s2>>, self |-> TRUE, committing |-> TRUE] @@
        t2 :>
            [participants |-> <<s1>>, self |-> TRUE, committing |-> FALSE] ) @@
  s2 :>
      ( t1 :> [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] @@
        t2 :>
            [participants |-> <<s2>>, self |-> FALSE, committing |-> FALSE] ) )

15228748 states generated, 1946047 distinct states found, 256891 states left on queue.
The depth of the complete state graph search is 22.
Finished in 01min 40s at (2024-07-25 09:43:02)
